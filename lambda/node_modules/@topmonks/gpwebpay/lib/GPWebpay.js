"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpWebpayOperation = void 0;
const GpWebpayResponse_1 = __importDefault(require("./GpWebpayResponse"));
var GpWebpayOperation;
(function (GpWebpayOperation) {
    GpWebpayOperation["CREATE_ORDER"] = "CREATE_ORDER";
})(GpWebpayOperation || (GpWebpayOperation = {}));
exports.GpWebpayOperation = GpWebpayOperation;
class GpWebpay {
    constructor(merchantNumber, gatewayUrl, privateKey, privateKeyPass, publicKey) {
        this.merchantNumber = merchantNumber;
        this.gatewayUrl = gatewayUrl;
        this.privateKey = privateKey;
        this.privateKeyPass = privateKeyPass;
        this.publicKey = publicKey;
    }
    getRequestUrl(request) {
        request.merchantNumber = this.merchantNumber;
        request.validateProperties();
        const privateKey = this.getPrivateKey();
        request.sign(privateKey, this.privateKeyPass);
        const postData = request.getPostData();
        return this.gatewayUrl + '?' + postData;
    }
    parseQueryString(str) {
        const data = {};
        const items = str.split('&');
        for (const item of items) {
            const itemData = item.split('=');
            data[itemData[0]] = decodeURIComponent(itemData[1]);
        }
        return data;
    }
    getPrivateKey() {
        return this.privateKey;
    }
    getPublicKey() {
        return this.publicKey;
    }
    createResponse(data, validate = true) {
        const publicKey = this.getPublicKey();
        return new GpWebpayResponse_1.default(this.merchantNumber, data, publicKey, validate);
    }
}
exports.default = GpWebpay;
